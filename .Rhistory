row_start
plate[41, 4]
plate
pars
platestring
just_reads
just_reads = str_extract(platestring, '((\\d\\d )|(\\d\\d\\d ))Reads')
library(stringr)
just_reads = str_extract(platestring, '((\\d\\d )|(\\d\\d\\d ))Reads')
numbers = str_extract_all(just_reads, '[^ Reads]')
# This should provide the number of reads in a usable format.
num_reads = as.numeric(paste(unlist(numbers), collapse = ""))
just_redas
just_reads
num_reads
just_int = str_extract(platestring, 'Interval (\\d:\\d\\d:\\d\\d)')
hrs = str
just_int
hrs = str(just_int, '\\d:\\d\\d:\\d\\d')
hrs = str_extract(just_int, '\\d:\\d\\d:\\d\\d')
hrs
str_split(hrs, :)
?str_split
str_split(hrs, ':')
times = str_split(hrs, ':')
times
times[1]
times[[1]][1]
times[[1]][2]
times[[1]][3]
as.numeric(times[[1]][1])
int_time = int_time + as.numeric(times[[1]][2])/60
int_time = as.numeric(times[[1]][1])
int_time = int_time + as.numeric(times[[1]][2])/60
int_time
times = str_split(hrs, ':')
int_time = as.numeric(times[[1]][1])
int_time = int_time + as.numeric(times[[1]][2])/60
int_time = int_time + as.numeric(times[[1]][3])/360
int_time
row_end = row_start + (num_reads - 1)
row_start
row_end
41+73
num_reads
plate
plate[40:115, 4]
40 + 66
plate[41:115, 4]
41+66
row_end
66-1
plate[113, 4]
int_time
t = 4
1 + 4
plate
plate[41, 4]
plate[45, 4]
log(.094) - log(.091)
(log(.094) - log(.091))/1
time_size(4)
time_size = function(t)
{
return(t * int_time)
}
time_size(4)
times = seq(from = 14, to = (14 * 73), by = 15)
times
plot(times, plate[41, 4])
length(plate[41, 4])
length(plate[41:113, 4])
length(times)
times = seq(from = 14, to = (15 * 73), by = 15)
times
length(times)
plot(times, plate[41:113, 4])
test = bac_gr(plate[41:113], 4)
bac_gr = function(ods, t)
{
for(od_ind in 1:(length(ods) - t))
{
(log(ods[od_ind + t]) - log(ods[od_ind]))/(time_size(t))
}
}
test = bac_gr(plate[41:113], 4)
test = bac_gr(plate[41:113, 4], 4)
test = bac_gr(as.numeric(plate[41:113, 4]), 4)
test
as.numeric(plate[41:113, 4])
bac_gr = function(ods, t)
{
for(od_ind in 1:(length(ods) - t))
{
growths = c(growths, (log(ods[od_ind + t]) - log(ods[od_ind]))/(time_size(t)))
}
return(growths)
}
bac_gr(as.numeric(plate[41:113, 4]), 4)
bac_gr = function(ods, t)
{
growths = NULL
for(od_ind in 1:(length(ods) - t))
{
growths = c(growths, (log(ods[od_ind + t]) - log(ods[od_ind]))/(time_size(t)))
}
return(growths)
}
bac_gr(as.numeric(plate[41:113, 4]), 4)
test = bac_gr(as.numeric(plate[41:113, 4]), 4)
plot(times, test)
length(test)
plot(times[1:70], test)
length(1:69)
plot(times[1:69], test)
plot(times, as.numeric(plate[41:113, 4]), type = "l", lwd = 4, xlab = "Time in min", ylab = "OD")
test_hr = bac_gr(as.numeric(plate[41:113, 4]), 4)
test_.5hr = bac_gr(as.numeric(plate[41:113, 4]), 2)
test_2hr = bac_gr(as.numeric(plate[41:113, 4]), 8)
plot(times[1:69], test_hr, type = "l", lwd = 4, xlab = "Time", ylab = "Growth rate")
points(times[1:71], test_.5hr, type= "l", lwd = 4, col = "red")
points(times[1:65], test_2hr, type= "l", lwd = 4, col = "blue")
legend(760, .3, legend = c('.5 hr', '1 hr', '2 hr'), lwd = 4, col = c('red', 'black', 'blue'))
sample(1:360, 10)
sample(1:360, 10)
site.name = 'KonzaPrairie'
locale.name = 'gall'
data1 = read.csv("/Users/caitlinmiller/Desktop/Github/insect_apoc/CGP011.csv",as.is=T,check.names=F,header=T)
data1$Year = data1$RecYear
data1$Number = data1$GalledStems
u.years = sort(as.numeric(unique(data1$Year)))
out.slopes = data.frame('LTER.site'=NA,'Locale'=NA,'Species.code'=NA,'Year'=-999,'N.Obs'=-999,'Abundance'=-999)
cx = 1
for (y in 1:length(u.years)){
y.data = data1[which(data1$Year==u.years[y]),]
n.y1 = sum(y.data$SampledStems,na.rm=T)
out.slopes[cx,1] = site.name #LTER.site
out.slopes[cx,2] = locale.name #Locale
out.slopes[cx,3] = 'gall insects' #Species.code
out.slopes[cx,4] = u.years[y] #Year
out.slopes[cx,5] = n.y1 #Number of observations
out.slopes[cx,6] = sum(y.data$Number,na.rm=T) #abundance
cx = cx + 1
}
out.slopes
write.table(out.slopes,paste0('./summary_tables/arthropods/Species-level/',site.name,'_GallInsect_SpeciesSlopes.txt'),sep='\t',quote=F,row.names=F)
gall_out = out.slopes
site.name = 'KonzaPrairie'
locale.name = 'grasshopper'
data1 = read.csv("/Users/caitlinmiller/Desktop/Github/insect_apoc/CGR022.csv",as.is=T,check.names=F,header=T)
data1
data1 = data1[which(data1$Species!='unknown' & data1$Species!='unknown ' & data1$Species!=''),]
site.name = 'KonzaPrairie'
locale.name = 'grasshopper'
data1 = read.csv("/Users/caitlinmiller/Desktop/Github/insect_apoc/CGR022.csv",as.is=T,check.names=F,header=T)
data1$Species = data1$SPECIES
data1$Year = data1$RECYEAR
data1$Number = as.numeric(data1$TOTAL)
nrow(data1)
data1 = data1[which(data1$Species!='unknown' & data1$Species!='unknown ' & data1$Species!=''),]
nrow(data1)
u.years = sort(as.numeric(unique(data1$Year)))
u.years
u.species = unique(data1$Species)
u.species
konza.duplicates = read.csv('/Users/caitlinmiller/Downloads/External_Database_S3/taxa_keys/KonzaPrairie_grasshoppers_duplicatenames.csv',
as.is=T,check.names=F,header=F)
konza.duplicates
konza.duplicates[2, V1]
konza.duplicates[2, 1]
konza.duplicates[2, 2]
class(konza.duplicates[2, 2])
class(konza.duplicates[2, 1])
which(konza.duplicates[,1]==data1$Species[2])
konza.duplicates[56, ]
which(konza.duplicates[,1] == 'Melanoplus scudderi')
konza.duplicates[57, ]
which(konza.duplicates[,1] == 'huh')
konza.duplicates[which(konza.duplicates[,1] == 'huh'), 2]
?match
konza.duplicates
data1 = data1[which(data1$Species!='Unknown'),]
for (i in 1:nrow(data1)){
name.swap = konza.duplicates[which(konza.duplicates[,1]==data1$Species[i]),2]
if (length(name.swap)==0){
name.swap = konza.duplicates[match(data1$Species[i],konza.duplicates[,2]),2]
} else {
}
data1$Species[i] = name.swap
}
u.species
u.species1 = u.species
u.species = unique(data1$Species)
u.species1 == u.species
u.species
length(u.species1)
length(u.species)
out.diversity = data.frame('LTER.site'=NA,'Locale'=NA,'Year'=-999,'N.obs'=-999,'Total.abundance'=-999,'N.species'=-999,'Species.evenness'=-999,'Species.decay.rate'=-999,'Fishers.alpha'=-999,'Dominance'=-999)
out.diversity
lx = 1
u.years
u.years[1]
y = 1
y.data = data1[which(data1$Year==u.years[y]),]
data1[y.data, ]
y.data
table(y.data$Year)
paste(y.data$RECMONTH,y.data$RECDAY,y.data$REPSITE,sep='_')
unique(paste(y.data$RECMONTH,y.data$RECDAY,y.data$REPSITE,sep='_'))
y.data$Species
y.data$Number
y.data$Number[1:10]
y.data$Species[1:10]
small_sp = y.data$Species[1:10]
small_no = y.data$Number[1:10]
sp1 = small_sp
ab1 = small_no
unique(sp1)
usp = unique(sp1)
usp
array(usp)
class(usp)
class(array(usp))
?apply
array(usp)[1]
array(usp)[1, ]
function(x){sum(ab1[which(sp1==x)],na.rm=T)}
ab1
sp``
sp1
spc = apply(array(usp),1,function(x){sum(ab1[which(sp1==x)],na.rm=T)})
spc
rich = length(which(spc>0))
rich = length(which(spc>0))
spc
sum(spc)
spc/sum(spc)
spcp
.0594059 * log(.0594059)
0 * log(0)
.0001 * log(.0001)
.5 * log(.5)
.9 * log(.9)
.1 * log(.1)
.09482446 + .2302585
.5 * log(.5)
log(.1)
log(.9)
length(spcp)
spcp = spc / sum(spc,na.rm=T)
spcp
length(spcp)
log(7)
log(10)
log(5)
(.25 * log(.25)) * 4
1.386/(log(4))
(.5 * log(.5)) * 2
.69315/(log(2))
(.1 * log(.1)) * 10
2.3/(log(10))
?str
cats <- data.frame(coat = c('calico', 'black', 'tabby'), weight = c(2.1, 5.0, 3.2), likes_catnip = c(1, 0, 1))
cats
cats
age <- c(2, 3, 5)
age
cbind(cats, age)
age <- c(2, 3)
cbind(cats, age)
length(age)
age
nrow(cats)
age <- c(2, 3, 5)
cats <- cbind(cats, age)
cats
cats <- data.frame(coat = c('calico', 'black', 'tabby'), weight = c(2.1, 5.0, 3.2), likes_catnip = c(1, 0, 1))
cats
cats
age <- c(2, 3, 5)
cbind(cats, ages)
cbind(cats, age)
age <- c(2, 3)
cbind(cats, age)
length(age)
nrow(cats)
cats <- data.frame(coat = c('calico', 'black', 'tabby'), weight = c(2.1, 5.0, 3.2), likes_catnip = c(1, 0, 1))
cats
cats
age <- c(2, 3, 5)
age
cbind(cats, age)
age <- c(2, 3)
cbind(cats, age)
length(age)
nrow(cats)
rows = 50
columns = 25
total = rows * columns
hex = matrix(0, ncol=2, nrow=6)
hex[1,] = c(1, 0)
hex[2,] = c(cos(1/3 * pi), sin(1/3 * pi))
hex[3,] = c(cos(2/3 * pi), sin(2/3 * pi))
hex[4,] = c(-1, 0)
hex[5,] = c(cos(4/3 * pi), sin(4/3 * pi))
hex[6,] = c(cos(5/3 * pi), sin(5/3 * pi))
hex = hex * 0.3333333
# odds rows are shifted right, even rows left
cols = matrix("white", nrow=rows, ncol=columns)
neighborhoods = matrix(0, nrow=total, ncol=6)
neighbors = rep(0, total)
for(i in 1:rows)
{
for(j in 1:columns)
{
k = i + (j - 1) * rows
offset = 0
if(i %% 2 == 1) offset = 0.55
centerFocal = c(j * 1.1 + offset, i * 0.33333)
for(I in 1:rows)
{
for(J in 1:columns)
{
if(i != I | j != J)
{
K = I + (J - 1) * rows
offset = 0
if(I %% 2 == 1) offset = 0.55
center = c(J * 1.1 + offset, I * 0.33333)
if(sum((center - centerFocal)^2) < 1)
{
neighbors[k] = neighbors[k] + 1
neighborhoods[k, neighbors[k]] = K
}
}
}
}
}
}
cols[neighborhoods[480,]] = sample(c("orange", "dodgerblue", "chartreuse2"), 6, replace=TRUE)
growthRounds = 300
for(i in 1:growthRounds)
{
focal = sample(which(cols != "white"), 1)
ns = neighborhoods[focal,]
ns = ns[which(ns > 0 & cols[ns] == "white")]
if(length(ns) > 0)
{
if(length(ns) > 1)
{
newTile = sample(ns, 1)
} else {
newTile = ns
}
cols[newTile] = cols[focal]
}
}
plot(0, 0, xlim = c(5, 16), ylim=c(5, 16), type="n", asp=1)
for(i in 1:rows)
{
offset = 0
if(i %% 2 == 1) offset = 0.55
for(j in 1:columns)
{
polygon(j * 1.1 + hex[,1] + offset, i * 0.33333 + hex[,2], col=cols[i,j])
}
}
rows = 50
columns = 25
total = rows * columns
hex = matrix(0, ncol=2, nrow=6)
hex[1,] = c(1, 0)
hex[2,] = c(cos(1/3 * pi), sin(1/3 * pi))
hex[3,] = c(cos(2/3 * pi), sin(2/3 * pi))
hex[4,] = c(-1, 0)
hex[5,] = c(cos(4/3 * pi), sin(4/3 * pi))
hex[6,] = c(cos(5/3 * pi), sin(5/3 * pi))
hex = hex * 0.3333333
# odds rows are shifted right, even rows left
cols = matrix("white", nrow=rows, ncol=columns)
neighborhoods = matrix(0, nrow=total, ncol=6)
neighbors = rep(0, total)
for(i in 1:rows)
{
for(j in 1:columns)
{
k = i + (j - 1) * rows
offset = 0
if(i %% 2 == 1) offset = 0.55
centerFocal = c(j * 1.1 + offset, i * 0.33333)
for(I in 1:rows)
{
for(J in 1:columns)
{
if(i != I | j != J)
{
K = I + (J - 1) * rows
offset = 0
if(I %% 2 == 1) offset = 0.55
center = c(J * 1.1 + offset, I * 0.33333)
if(sum((center - centerFocal)^2) < 1)
{
neighbors[k] = neighbors[k] + 1
neighborhoods[k, neighbors[k]] = K
}
}
}
}
}
}
cols[neighborhoods[480,]] = sample(c("orange", "dodgerblue", "chartreuse2"), 6, replace=TRUE)
plot(0, 0, xlim = c(5, 16), ylim=c(5, 16), type="n", asp=1)
for(i in 1:rows)
{
offset = 0
if(i %% 2 == 1) offset = 0.55
for(j in 1:columns)
{
polygon(j * 1.1 + hex[,1] + offset, i * 0.33333 + hex[,2], col=cols[i,j])
}
}
growthRounds = 300
for(i in 1:growthRounds)
{
focal = sample(which(cols != "white"), 1)
ns = neighborhoods[focal,]
ns = ns[which(ns > 0 & cols[ns] == "white")]
if(length(ns) > 0)
{
if(length(ns) > 1)
{
newTile = sample(ns, 1)
} else {
newTile = ns
}
cols[newTile] = cols[focal]
}
}
plot(0, 0, xlim = c(5, 16), ylim=c(5, 16), type="n", asp=1)
for(i in 1:rows)
{
offset = 0
if(i %% 2 == 1) offset = 0.55
for(j in 1:columns)
{
polygon(j * 1.1 + hex[,1] + offset, i * 0.33333 + hex[,2], col=cols[i,j])
}
}
?polygon
data1 = read.csv('PerSpecies_Abundance_LTER_annotated.csv',as.is=T,check.names=F,header=T)
setwd('/Users/caitlinmiller/Desktop/Github/insect_apoc')
data1 = read.csv('PerSpecies_Abundance_LTER_annotated.csv',as.is=T,check.names=F,header=T)
head(data1)
data1$Species.code
data1$Year
unique(data1$Year)
2015-1982
spp = 1
which(data1$Species.code == u.species[spp])
head(data1)
lm(Abundance ~ Year, data = data1[spp_i, ])
spp_i = which(data1$Species.code == u.species[spp])
lm(Abundance ~ Year, data = data1[spp_i, ])
lm(Abundance ~ Year, data = data1[spp_i, ])
lm(Abundance ~ Year, data = data1[spp_i, ])[2]
lm(Abundance ~ Year, data = data1[spp_i, ])[[1]][2]
data1$Abundance[spp_i, ]
data1$Abundance[spp_i]
(data1$Year[spp_i])
which(data1$Year[spp_i] <= 1986)
mean(data1$Year[spp_i][1:5])
mean(data1$Abundance[spp_i][1:5])
max(data1$Abundance[spp_i])
data1 = read.csv('PerSpecies_Abundance_LTER_annotated.csv',as.is=T,check.names=F,header=T)
u.species = unique(data1$Species.code)
no_species = length(u.species)
slopes = rep(NA, no_species)
max_abun = rep(NA, no_species)
start_abun = rep(NA, no_species)
for(spp in 1:no_species)
{
spp_i = which(data1$Species.code == u.species[spp])
slopes[spp] = as.numeric(lm(Abundance ~ Year, data = data1[spp_i, ])[[1]][2])
max_abun[spp] = max(data1$Abundance[spp_i])
# For start abundance, I will take an average of the first 5 measurements to account for the possibility
# that the first measurement is an outlier.
mean(data1$Abundance[spp_i][1:5])
}
plot(max_abun, slopes)
data1 = read.csv('PerSpecies_Abundance_LTER_annotated.csv',as.is=T,check.names=F,header=T)
u.species = unique(data1$Species.code)
no_species = length(u.species)
slopes = rep(NA, no_species)
max_abun = rep(NA, no_species)
start_abun = rep(NA, no_species)
for(spp in 1:no_species)
{
spp_i = which(data1$Species.code == u.species[spp])
slopes[spp] = as.numeric(lm(Abundance ~ Year, data = data1[spp_i, ])[[1]][2])
max_abun[spp] = max(data1$Abundance[spp_i])
# For start abundance, I will take an average of the first 5 measurements to account for the possibility
# that the first measurement is an outlier.
start_abun[spp] = mean(data1$Abundance[spp_i][1:5])
}
plot(start_abun, slopes)
start_abun
plot(start_abun[2:54], slopes[2:54])
abline(lm(slopes[2:54] ~ start_abun[2:54]))
lm(slopes[2:54] ~ start_abun[2:54])
test = lm(slopes[2:54] ~ start_abun[2:54])
test
summary(test)
